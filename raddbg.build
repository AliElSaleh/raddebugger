## --- Usage Notes (2024/1/10) ------------------------------------------------

 This is a central build script for the RAD Debugger project. It takes a list
 of simple alphanumeric-only arguments which control 
    (a) what is built
    (b) which compiler & linker are used
    (c) extra high-level build options. By default, if no options are passed, then the main "raddbg" graphical debugger is built.

 Below is a non-exhaustive list of possible ways to use the script:
 - riftbuild
 - riftbuild cl
 - riftbuild release
 - riftbuild asan telemetry
 - riftbuild rdi_from_pdb

 Below is a list of all possible non-target command line options:

 - asan      : enable address sanitizer
 - telemetry : enable RAD telemetry profiling support

## ---------------------------------------------------------------------------

FinalName raddbg

if release Assembly $(FinalName) else Assembly $(FinalName)-debug
if cl      Compiler cl     else Compiler clang

if !no_meta Depends metagen src/metagen | $compiler

SourceDirectory       src
BuildDirectory        build
IntermediateDirectory int

FilesToUse raddbg_main.c

if rdi_from_pdb              FinalName` rdi_from_pdb          ; FilesToUse` rdi_from_pdb_main.c
if rdi_from_dwarf            FinalName` rdi_from_dwarf        ; FilesToUse` rdi_from_dwarf.c
if rdi_dump                  FinalName` rdi_dump              ; FilesToUse` rdi_dump_main.c
if rdi_breakpad_from_pdb     FinalName` rdi_breakpad_from_pdb ; FilesToUse` rdi_breakpad_from_pdb_main.c
if ryan_scratch              FinalName` ryan_scratch          ; FilesToUse` ryan_scratch.c
if cpp_tests                 FinalName` cpp_tests             ; FilesToUse` i_hate_c_plus_plus.cpp
if look_at_raddgb            FinalName` look_at_raddgb        ; FilesToUse` look_at_raddbg.c
if mule_main                 FinalName` mule_main             ; FilesToUse` mule_main.cpp mule_inline.cpp
if mule_module               FinalName` mule_module           ; FilesToUse` mule_module.cpp

IncludedSourceFiles $FilesToUse

Includes src local

Defines [
    OS_FEATURE_GRAPHICAL=%!rdi_from_pdb
    OS_FEATURE_SOCKET=%net
    BUILD_GIT_HASH=\"!(git describe --always --dirty)\"
]

Icon logo.ico

#PreBuild.NewDirectory local

AsanCompilerFlags
TelemetryDefines
if asan      AsanCompilerFlags -fsanitize=address
if telemetry TelemetryDefines PROFILE_TELEMETRY=1

# status logging
if FilesToUse == raddbg_main.c "[default mode, assuming `raddbg` build]"
if FilesToUse == raddbg_main.c RunAssembly

if debug                       "[debug mode]"
if release                     "[release mode]"
if compiler == clang           "[clang compile]"
if compiler == cl              "[msvc compile]"
if asan                        "[asan enabled]"
if telemetry                   "[telemetry enabled]"
if no_meta                     "[skipping metagen]"

WarningFlags_Clang [
    -Wall
    -Wno-missing-braces
    -Wno-unused-function
    -Wno-writable-strings
    -Wno-unused-value
    -Wno-unused-variable
    -Wno-unused-local-typedef
    -Wno-deprecated-register
    -Wno-deprecated-declarations
    -Wno-unused-but-set-variable
    -Wno-single-bit-bitfield-constant-conversion
    -Wno-compare-distinct-pointer-types
]

CommonFlags_Clang [
    $WarningFlags_Clang
    -maes -msse3 -msse4
    -gcodeview
    -fdiagnostics-absolute-paths
    -Xclang
    -flto-visibility-public-std
]

CommonDefines_Clang [
    _USE_MATH_DEFINES
    strdup=_strdup
    gnu_printf=printf
    $TelemetryDefines
]

CommonFlags_MSVC   /nologo /FC /Z7 /MP
CommonDefines_MSVC $TelemetryDefines

DebugFlags_Clang   $CommonFlags_Clang -g -O0
ReleaseFlags_Clang $CommonFlags_Clang -g -O3

DebugFlags_MSVC    $CommonFlags_MSVC /Od
ReleaseFlags_MSVC  $CommonFlags_MSVC /O2

DebugDefines       _DEBUG
ReleaseDefines     NDEBUG

if compiler == clang {
    ReleaseFlags     $ReleaseFlags_Clang
    DebugFlags       $DebugFlags_Clang
    LinkerFlags      -Xlinker /natvis:"src\natvis\base.natvis"
    Defines          $CommonDefines_Clang
} else {
    ReleaseFlags     $ReleaseFlags_MSVC
    DebugFlags       $DebugFlags_MSVC
    LinkerFlags      /natvis:"src\natvis\base.natvis"
    Defines          $CommonDefines_MSVC
}

if release {
    CompilerFlags $ReleaseFlags
    Defines       $ReleaseDefines
} else {
    CompilerFlags $DebugFlags
    Defines       $DebugDefines
}

